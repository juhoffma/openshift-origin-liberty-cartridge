#!/bin/bash
source $OPENSHIFT_CARTRIDGE_SDK_BASH
export PATH=${OPENSHIFT_LIBERTY_PROFILE}/bin:$PATH
export STOPTIMEOUT=10

$cartridge_type="liberty"


function build() {
  echo '>>> Processing action "BUILD"...'
  echo "Building $cartridge_type cartridge..."

  CONFIG_DIR="${OPENSHIFT_DATA_DIR}/maven"
  OPENSHIFT_MAVEN_MIRROR="${CONFIG_DIR}/settings.base.xml"
  if $(echo $OPENSHIFT_GEAR_DNS | egrep -qe "\.rhcloud\.com")
  then
      OPENSHIFT_MAVEN_MIRROR="${CONFIG_DIR}/settings.rhcloud.xml"
  fi

  max_memory_mb=${OPENSHIFT_GEAR_MEMORY_MB}

  # If hot deploy is enabled, we need to restrict the Maven memory size to fit
  # alongside the running application server. For now, just hard-code it to 64
  # and figure out how to apply a scaling factor later.
  if hot_deploy_enabled_for_latest_deployment
  then
      echo "Scaling down Maven heap settings due to presence of hot_deploy marker..."

      if [ -z "$MAVEN_JVM_HEAP_RATIO" ]; then
      MAVEN_JVM_HEAP_RATIO=0.25
    fi
  else
    if [ -z "$MAVEN_JVM_HEAP_RATIO" ]; then
      MAVEN_JVM_HEAP_RATIO=0.75
    fi
  fi

  max_heap=$( echo "$max_memory_mb * $MAVEN_JVM_HEAP_RATIO" | bc | awk '{print int($1+0.5)}')

  OPENSHIFT_MAVEN_XMX="-Xmx${max_heap}m"

  if [ -z "$BUILD_NUMBER" ]
  then
      if force_clean_build_enabled_for_latest_deployment
      then
          echo "Force-clean build is enabled. Removing Maven dependencies..." 1>&2
          rm -rf ${OPENSHIFT_HOMEDIR}.m2/* ${OPENSHIFT_HOMEDIR}.m2/.[^.]*
      fi

      if [ -f ${OPENSHIFT_REPO_DIR}pom.xml ] && ! marker_present skip_maven_build
      then
          pushd ${OPENSHIFT_REPO_DIR} > /dev/null

          if [ -z "$MAVEN_OPTS" ]; then
            export MAVEN_OPTS="$OPENSHIFT_MAVEN_XMX"
          fi

          if [ -z "$MAVEN_ARGS" ]; then
            export MAVEN_ARGS="clean package -Popenshift -DskipTests"
          fi

          echo "Found pom.xml... attempting to build with 'mvn -e ${MAVEN_ARGS}'..."

          if [ -n "$OPENSHIFT_MAVEN_MIRROR" ]
          then
              mvn --global-settings $OPENSHIFT_MAVEN_MIRROR --version
              mvn --global-settings $OPENSHIFT_MAVEN_MIRROR $MAVEN_ARGS
          else
              mvn --version
              mvn $MAVEN_ARGS
          fi
          popd > /dev/null

          CART_NAME=${cartridge_type}
      fi

      if [ ! -f ${OPENSHIFT_REPO_DIR}pom.xml ]; then
        echo "Skipping Maven build due to absence of 'pom.xml'..."
      fi

      if marker_present "skip_maven_build"; then
        echo "skip_maven_build marker found; build will be skipped..."
      fi

  fi

}

function deploy() {
  echo '>>> Processing action "DEPLOY"...'
  echo "Deploying $cartridge_type cartridge..."

  # if repo/deployments has any files in it, sync them to $OPENSHIFT_LIBERTY_DEPLOYMENT_DIR
  # and delete any files in $OPENSHIFT_LIBERTY_DEPLOYMENT_DIR that don't exist in
  # repo/deployments
  if [ "$(ls ${OPENSHIFT_REPO_DIR}/deployments 2>/dev/null)" ]; then
    rsync -r --delete --exclude ".*" ${OPENSHIFT_REPO_DIR}/deployments/ $OPENSHIFT_LIBERTY_DEPLOYMENT_DIR
  fi
}

function is_running {
  echo '>>> Processing action "IS_RUNNING"...'
  pidfile="${PID_FILE}"

  if [ -f $pidfile ]; then
    pid=`cat $pidfile 2> /dev/null`

    if `ps --pid $pid > /dev/null 2>&1`
    then
      return 0
    fi
  fi

  return 1
}

function start {
  echo '>>> Processing action "START"...'

  if [ -f ${OPENSHIFT_REPO_DIR}/.openshift/config/server.xml ]; then
    echo "Found a user defined server.xml in ${OPENSHIFT_REPO_DIR}/.openshift/config/server.xml"
    echo "Overriding the default configuration using the users' definition"
    cp ${OPENSHIFT_REPO_DIR}/.openshift/config/server.xml ${WLP_USER_DIR}/servers/${OPENSHIFT_LIBERTY_SERVERNAME}
  fi

  if ! is_running; then
    echo "Starting WebSphere Liberty Profile using: ${OPENSHIFT_LIBERTY_BIN_DIR}/server start ${OPENSHIFT_LIBERTY_SERVERNAME}"
    ${OPENSHIFT_LIBERTY_BIN_DIR}/server start ${OPENSHIFT_LIBERTY_SERVERNAME}

    # Trigger initial deployment after profile creation
    touch -cf $OPENSHIFT_LIBERTY_DEPLOYMENT_DIR/ROOT.war
  else
    echo "WebSphere Liberty already running." 1>&2
  fi
}

function stop {
  echo '>>> Processing action "STOP"...'
  if is_running; then
    pidfile="${OPENSHIFT_DATA_DIR}/liberty.pid"

    if [ -f $pidfile ]; then
      pid=$( /bin/cat $pidfile )
      echo "Stopping Liberty process with PID ${pid}..."
      /bin/kill $pid
      ret=$?
      if [ $ret -eq 0 ]; then
        TIMEOUT="$STOPTIMEOUT"
        while [ $TIMEOUT -gt 0 ] && [ -f "$pidfile" ]
        do
          /bin/kill -0 "$pid" >/dev/null 2>&1 || break
          sleep 1
          let TIMEOUT=${TIMEOUT}-1
        done
      fi
    else
      echo "WebSphere Liberty already stopped." 1>&2
    fi
  fi
}

function restart() {
  echo '>>> Processing action "RESTART"...'
    stop
    start
}

function status {
  echo '>>> Processing action "STATUS"...'
  if is_running; then
    client_result "Websphere is running."
  else
    client_result "Websphere is stopped."
  fi

  exit 0
}

case "$1" in
  build)           build ;;
  deploy)          deploy ;;
  start)           start ;;
  stop)            stop;;
  status)          status;;
  restart)         restart;;
esac

echo '<<<'
echo ''
